<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Abhi's Experiments</title>
 <link href="http://abhidsm.github.com/atom.xml" rel="self"/>
 <link href="http://abhidsm.github.com/"/>
 <updated>2011-12-05T22:49:59+05:30</updated>
 <id>http://abhidsm.github.com/</id>
 <author>
   <name>Abhilash M A</name>
   <email>abhidsm@gmail.com</email>
 </author>

 
 <entry>
   <title>marked for destruction</title>
   <link href="http://abhidsm.github.com/ruby/marked/for/destruction/auto/save/association/auto/save/ruby/on/rails/rails/marked_for_destruction/active/record/base/2011/11/04/marked-for-destruction/"/>
   <updated>2011-11-04T17:04:00Z</updated>
   <id>http://tom.preston-werner.com/ruby/marked/for/destruction/auto/save/association/auto/save/ruby/on/rails/rails/marked_for_destruction/active/record/base/2011/11/04/marked-for-destruction</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;
  Today I had gone through an issue, which got fixed by using the
  marked_for_destruction? method. This marked_for_destruction is part
  of Active Record Autosave Association module. Autosave Association
  module takes care of automatically saving associated records when
  their parent is saved. For more details see
  &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/AutosaveAssociation.html&quot;&gt;
    Auto Save Association
  &lt;/a&gt;.
  &lt;br /&gt;&lt;br /&gt;
  In my project I have a model called Directory and it has many
    Categories. But I have to add a validation that there should be
    atleast one category associated with the directory. So in the
    directory model I added a validation in the after_save callback,
    which will check the count of Categories is greater that 0.
  &lt;br /&gt;&lt;br /&gt;
  But while we do the update directory if I deleted all the
    categories&amp;nbsp;the validation won't work , because I am using
    Autosave Association, which &amp;nbsp;saves category only after
    directory got saved. So at the time of Directory got saved the
    category count was greater than one, so validation will pass. To
    fix this issue I changed the condition that the categories count
    should be greater than 1. This is handled in the Directory model,
    and I want to let the controller know about the Directory not get
    saved. For that I will throw an exception if the condition fails.
  &lt;br /&gt;&lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;after_save:
    check_categories_count&lt;/span&gt;
  &lt;br /&gt;&lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;
    def &amp;nbsp;check_categories_count
  &lt;/span&gt;
  &lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;
    &amp;nbsp; &amp;nbsp;if self.categories.count &amp;lt;= 1
  &lt;/span&gt;
  &lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;
    &amp;nbsp; &amp;nbsp; &amp;nbsp; throw Exception
  &lt;/span&gt;
  &lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;
    &amp;nbsp; &amp;nbsp;end
  &lt;/span&gt;
  &lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;
    end
  &lt;/span&gt;
  &lt;br /&gt;&lt;br /&gt;
  Since the condition is checking for categories greater than 1 this
  will fail for update with only one category. Because on update also
  it will execute the after_save and there is only 1 category
  associated with this directory. But it should fail if we are
  deleting the only one category. So I added one more condition that
  checks if the only one category is marked for delete. So the
  condition becomes:
  &lt;br /&gt;&lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
  'Courier New', Courier, monospace;&quot;&gt;
    if self.categories.first.nil? ||
    self.categories.first.maked_for_destruction?
  &lt;/span&gt;
  &lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;
    &amp;nbsp; &amp;nbsp;throw Exception
  &lt;/span&gt;
  &lt;br /&gt;
  &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #cc0000; font-family:
                                        'Courier New', Courier,
                                        monospace;&quot;&gt;
    end
  &lt;/span&gt;
  &lt;br /&gt;&lt;br /&gt;
  Now it will fail only if the user tries to delete the last category.
  &lt;br /&gt;&lt;br /&gt;
&lt;/div&gt;
</content>
 </entry>
 
 <entry>
   <title>Write a named scope to fetch the data sorted by distance using Geokit</title>
   <link href="http://abhidsm.github.com/ruby/gem/named/scope/Geokit/order/by/distance/rails/sort/by/distance/distance_sql/chain/named/scope/2011/11/02/Write-a-named-scope-to-fetch-the-data-sorted-by-distance-using-Geokit/"/>
   <updated>2011-11-02T18:24:00Z</updated>
   <id>http://tom.preston-werner.com/ruby/gem/named/scope/Geokit/order/by/distance/rails/sort/by/distance/distance_sql/chain/named/scope/2011/11/02/Write-a-named-scope-to-fetch-the-data-sorted-by-distance-using-Geokit</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Recently I had to work on a feature &quot;As a User ISBAT see the Business sorted by distance&quot;. We are using Geokit gem for manipulating the location. And we have the models 'Business' has many 'Location's.&lt;br /&gt;&lt;br /&gt;I had to fetch the businesses in the order of the distance of the locations from the origin. The origin is the point which we will pass to the method. Since this method should be part of a chained named scope, I had to implement this as a named scope.&lt;br /&gt;&lt;br /&gt;After done some searching I found a useful link from &lt;a href=&quot;http://pivotallabs.com/users/nick/blog/articles/284-hasfinder-it-s-now-easier-than-ever-to-create-complex-re-usable-sql-queries&quot;&gt;pivotallabs&lt;/a&gt;. At the end there is one comment from Keith:&lt;br /&gt;&lt;pre style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; line-height: 18px; margin-bottom: 0.9em; margin-top: 0.9em; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;&quot;&gt;&lt;code style=&quot;font: normal normal normal 12px/normal 'bitstream vera sans mono', monaco, 'lucida console', 'courier new', courier, serif; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace; font-size: small;&quot;&gt;&lt;b&gt;named_scope :within, lambda{|o, d| &lt;br /&gt;      origin = o&lt;br /&gt;      distance_sql = self.distance_sql(origin)&lt;br /&gt;      within = d&lt;br /&gt;      {:select =&amp;gt; &quot;*, #{distance_sql} as distance&quot;,&lt;br /&gt;       :conditions =&amp;gt; &quot;#{distance_sql} &amp;lt;= #{within}&quot;,&amp;nbsp;&lt;br /&gt;       :order =&amp;gt; 'distance asc'}}&lt;/b&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;This code helped me to create a named scope which will fetch the businesses in the order of the distance.&lt;br /&gt;&lt;br /&gt;The test also passed for this named scope. But in the controller, where I am using this named scope along with other named scopes i,e, chained named scope, the named scope was not working as expected. It was throwing MySql Error with message &quot;distance is undefined&quot;.&lt;br /&gt;&lt;br /&gt;After done with some searching I found the &lt;a href=&quot;http://railsforum.com/viewtopic.php?id=26769&quot;&gt;link&lt;/a&gt;&amp;nbsp;which explains that in chain named_scopes only conditions will get added, and selects will get ignored.&lt;br /&gt;&lt;br /&gt;Then I tried by changing the 'distance' variable with the &lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;distance_sql&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: inherit;&quot;&gt;&amp;nbsp;as the order value. And it worked:&lt;/span&gt;&lt;br /&gt;&lt;pre style=&quot;background-attachment: initial; background-clip: initial; background-color: white; background-image: initial; background-origin: initial; line-height: 18px; margin-bottom: 0.9em; margin-top: 0.9em; padding-bottom: 8px; padding-left: 8px; padding-right: 8px; padding-top: 8px;&quot;&gt;&lt;code style=&quot;font: normal normal normal 12px/normal 'bitstream vera sans mono', monaco, 'lucida console', 'courier new', courier, serif; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace; font-size: small;&quot;&gt;&lt;b&gt;named_scope :by_location, lambda{|origin, within| &lt;br /&gt;      distance_sql = Location.distance_sql(origin)&lt;br /&gt;      {:select =&amp;gt; &quot;*&quot;,&lt;br /&gt;       :conditions =&amp;gt; &quot;#{distance_sql} &amp;lt;= #{within}&quot;,&amp;nbsp;&lt;br /&gt;       :order =&amp;gt; '#{distance_sql}', :joins =&amp;gt; :locations&lt;/b&gt;&lt;/span&gt;&lt;/code&gt;&lt;b style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace; line-height: normal;&quot;&gt;}}&lt;/b&gt;&lt;/pre&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-4428960323059044950?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>acts_as_taggable_on gem have issue with after_save callback</title>
   <link href="http://abhidsm.github.com/ruby/gem/issue/callback/rails/after_save/acts_as_taggable_on/gem/2011/10/07/acts_as_taggable_on-gem-have-issue-with-after_save-callback/"/>
   <updated>2011-10-07T19:02:00Z</updated>
   <id>http://tom.preston-werner.com/ruby/gem/issue/callback/rails/after_save/acts_as_taggable_on/gem/2011/10/07/acts_as_taggable_on-gem-have-issue-with-after_save-callback</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Today I had spent a lot of time fixing an after_save callback issue related with &lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;acts_as_taggable_on&lt;/a&gt; gem. We're associating keyword tag to a model using the following command:&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;b&gt;acts_as_taggable_on :keywords&lt;/b&gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;And we've a after_save call back in that model which uses the updated keywords. But the issue was in the callback, if you reload the object you will lose the new keywords associated with it, because the keywords are not yet saved.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;Then I Googled about this issue and found the following blog which helped me to solve the issue:&lt;/div&gt;&lt;div&gt;&lt;a href=&quot;http://blog.romanandreg.com/post/176944361/activerecord-callbacks-acts-as-taggable-gotcha&quot;&gt;http://blog.romanandreg.com/post/176944361/activerecord-callbacks-acts-as-taggable-gotcha&lt;/a&gt;&lt;/div&gt;&lt;div&gt;I tried with the &lt;b&gt;update_tags&lt;/b&gt; mentioned in the blog, but with the latest acts_as_taggable_on gem this fix is not working. Then I gone through the code of &lt;a href=&quot;https://github.com/mbleigh/acts-as-taggable-on&quot;&gt;acts_as_taggable_on&lt;/a&gt; gem, and in core.rb I found the following line:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;background-color: white; line-height: 16px; white-space: pre;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;b&gt;&lt;span class=&quot;n&quot; style=&quot;margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;after_save&lt;/span&gt; &lt;span class=&quot;ss&quot; style=&quot;color: #990073; margin-bottom: 0px; margin-left: 0px; margin-right: 0px; margin-top: 0px; padding-bottom: 0px; padding-left: 0px; padding-right: 0px; padding-top: 0px;&quot;&gt;:save_tags&lt;/span&gt;&lt;/b&gt;&lt;/span&gt;&lt;/span&gt;&amp;nbsp;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;Then I tried calling &lt;b&gt;save_tags&lt;/b&gt; from my callback method. Thats it!&lt;/div&gt;&lt;div&gt;It got fixed!!&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-4500628703503484258?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Updated time_diff gem</title>
   <link href="http://abhidsm.github.com/ruby/gem/time/difference/gem/time/difference/time_diff/gem/2011/04/10/Updated-time_diff-gem/"/>
   <updated>2011-04-10T15:09:00Z</updated>
   <id>http://tom.preston-werner.com/ruby/gem/time/difference/gem/time/difference/time_diff/gem/2011/04/10/Updated-time_diff-gem</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Now with &lt;a href=&quot;https://rubygems.org/gems/time_diff&quot;&gt;time_diff&lt;/a&gt; gem you can calculate the time differnce between two Time in the formatted form by passing a third parameter to the Time.diff() method.&lt;br /&gt;&lt;br /&gt;If you are not passing any parameter then by default it will take the third parameter value as&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;b&gt;&amp;nbsp;&lt;/b&gt;'&lt;span class=&quot;Apple-style-span&quot; style=&quot;line-height: 18px; white-space: pre;&quot;&gt;%y, %M, %w, %d and %h:%m:%s&lt;/span&gt;'&lt;/span&gt; and it will return the formatted time difference in the form:&amp;nbsp;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace; line-height: 18px; white-space: pre;&quot;&gt;'1 year, 2 months, 3 weeks, 4 days and 12:05:52'&lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: Monaco, 'Courier New', 'DejaVu Sans Mono', 'Bitstream Vera Sans Mono', monospace; font-size: 12px; line-height: 18px; white-space: pre;&quot;&gt;.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;For hours, minutes and seconds have two formats, with text and without text. The parameter is with '%h', '%m', '%s' are the formats which won't add text with the value, ie., it return 3 for '3 hours'. The parameters with he formats '%H', '%N', '%S' will return the values with text, ie., '2 hours', '30 minutes'.&lt;br /&gt;&lt;br /&gt;If you are using the default format ie., formats with comma seperated, then it will remove the intervals(year, month, ..) which are zero.&lt;br /&gt;&lt;br /&gt;If you need only day and hours in the time difference you can specify that by passing parameter in the format of '%d %h'. This will calculate the formatted time diff text only for days and hours.&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-5383436760290860790?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Create ruby gem using Jeweler</title>
   <link href="http://abhidsm.github.com/ruby/gem/time_diff/jeweler/gem/2011/03/13/Create-ruby-gem-using-Jeweler/"/>
   <updated>2011-03-13T11:21:00Z</updated>
   <id>http://tom.preston-werner.com/ruby/gem/time_diff/jeweler/gem/2011/03/13/Create-ruby-gem-using-Jeweler</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Recently I created a ruby gem &lt;a href=&quot;http://rubygems.org/gems/time_diff&quot;&gt;time_diff&lt;/a&gt; using the help of &lt;a href=&quot;https://github.com/technicalpickles/jeweler&quot;&gt;jeweler&lt;/a&gt;. Jeweler is a gem using that you can create and manage ruby gems.&lt;br /&gt;First install jeweler:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;sudo gem install jeweler&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then create the scaffold for your gem using the command:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;jeweler your-gem&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This will create two directory test and lib. In lib folder you can create the files for your gem. In test folder you can create the files for tests. The above command will create some other files also like Rakefile, README.rdoc, &amp;nbsp;Gemfile. You can add your dependencies to the Gemfile.&lt;br /&gt;&lt;br /&gt;You can create the version using:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;rake version:write&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then you can install the gem in your local machine using:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;rake install&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then to release the gem to RubyGem:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;rake release&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You need a RubyGem account to push gem to your account.&lt;br /&gt;&lt;br /&gt;For more information visit &lt;a href=&quot;https://github.com/technicalpickles/jeweler&quot;&gt;GitHub&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-5858139511094279?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>time_diff - a gem for calculating the difference between two TIME</title>
   <link href="http://abhidsm.github.com/ruby/gem/time/difference/gem/time/difference/time_diff/gem/2011/03/07/time_diff---a-gem-for-calculating-the-difference-between-two-TIME/"/>
   <updated>2011-03-07T17:06:00Z</updated>
   <id>http://tom.preston-werner.com/ruby/gem/time/difference/gem/time/difference/time_diff/gem/2011/03/07/time_diff---a-gem-for-calculating-the-difference-between-two-TIME</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Yesterday I created a gem for calculating the difference between two TIME.&lt;br /&gt;&lt;br /&gt;When I was working in my office, we found that there is no method to extract the difference between two Time in a useful format like years, month, week, day, hour, minute and second.&lt;br /&gt;&lt;br /&gt;time1 - time2 return only difference inseconds.&lt;br /&gt;&lt;br /&gt;So I created this gem &lt;a href=&quot;https://rubygems.org/gems/time_diff&quot;&gt;time_diff&lt;/a&gt;&amp;nbsp;which return the hash with difference:&lt;br /&gt;&lt;br /&gt;{ :year =&amp;gt; 0, :month =&amp;gt; 0, :day =&amp;gt; 0, :week =&amp;gt; 0, :hour =&amp;gt; 0, :minute =&amp;gt; 0, :second =&amp;gt; 0 }&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-5906252203540403384?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>State Machine</title>
   <link href="http://abhidsm.github.com/State/Machine/plugin/rails/2011/03/06/State-Machine/"/>
   <updated>2011-03-06T09:31:00Z</updated>
   <id>http://tom.preston-werner.com/State/Machine/plugin/rails/2011/03/06/State-Machine</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;In some application we need to track the state of a model. For example, a user requested for signup. Admin has to approve the user for the user to login. Admin has the option to reject the user also. So the status of the user model will be in one of the following states [pending, approved, rejected].&lt;br /&gt;&lt;br /&gt;The famous plugin used for tracking the state is &lt;a href=&quot;https://github.com/rubyist/aasm&quot;&gt;aasm&lt;/a&gt;. You can install Acts as state machine using:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;sudo gem install aasm&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then in the user model you have to include the plugin&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;include AASM&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then specify which field you want to use as the state.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm_column :status&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Now you can write the states of the model:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm_state :pending&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm_state :approved&amp;nbsp;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm_state :rejected&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;You can set initial state using:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm_initial_state :pending&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Now we need the events to change the state:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm_event :approve do&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp;transitions :to =&amp;gt; :approved, :from =&amp;gt; [:pending]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm_event :reject do&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp;transitions :to =&amp;gt; :rejected, :from =&amp;gt; [:pending]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This is all we need in model.&lt;br /&gt;&lt;br /&gt;Now to change the state of the model object you can use:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000;&quot;&gt;user.approve!&lt;/span&gt; &lt;/span&gt;&amp;nbsp;#To approve the user&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;user.reject!&lt;/span&gt; &amp;nbsp; &amp;nbsp; &amp;nbsp;#To reject the user&lt;br /&gt;&lt;br /&gt;If you want to do something while the state of the model is change from one state to another you can call the method at the time of state change using:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;aasm :approved, :enter =&amp;gt; entered_to_apporoved, :exit =&amp;gt; exit_from_approved&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;At the time of state definition you can specify the enter method and exit method to call.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-4582293218607317697?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Heroku</title>
   <link href="http://abhidsm.github.com/platform/as/a/service/rails/heroku/free/domain/2011/02/06/Heroku/"/>
   <updated>2011-02-06T14:54:00Z</updated>
   <id>http://tom.preston-werner.com/platform/as/a/service/rails/heroku/free/domain/2011/02/06/Heroku</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Heroku is a PAAS (Platform As A Service) for Ruby on Rails. You will get a free domain with limited support for your Rails App. After signup to Heroku, you can install the gem:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;gem install heroku&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then you can start your application with create command:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;heroku create yourapp&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Using git commands you can deploy this app to the Heroku:&lt;br /&gt;&lt;br /&gt;git add, git commit,&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;git push heroku master&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This will deploy to your heroku repository, git @heroku.com:yourapp.git&lt;br /&gt;And your URL will be, http://yourapp.heroku.com&lt;br /&gt;&lt;br /&gt;To do the db:migrate run the command:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;heroku rake db:migrate&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;For more details visit &lt;a href=&quot;http://heroku.com/&quot;&gt;Heroku&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-637410503858490785?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Pagination</title>
   <link href="http://abhidsm.github.com/performance/multiple/page/will_paginate/rails/pagination/2011/02/04/Pagination/"/>
   <updated>2011-02-04T15:55:00Z</updated>
   <id>http://tom.preston-werner.com/performance/multiple/page/will_paginate/rails/pagination/2011/02/04/Pagination</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;If you have a web page with a list of data more than a screen height, it won't be look good. The user have to scroll down to see the data, and mostly it will affect the performance of your website. If there are 100 rows of data in a list, we will fetch all the data to show in the list. But if we are using pagination we can limit the number of data to fetch, for example if we need to show only 10 rows of data per page we only need to fetch 10 records, not the entire data.&lt;br /&gt;&lt;br /&gt;There is a gem called &lt;a href=&quot;https://github.com/mislav/will_paginate/wiki/&quot;&gt;will_paginate&lt;/a&gt;&amp;nbsp;which do all we need to do for a pagination in our rails web app. All you need to do is install the gem:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;gem install will_paginate&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Then when you are accessing model for data, use the paginate along with that:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;@data = Data.paginate :page =&amp;gt; params[:page]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Here params[:page] is the page number we need to fetch. This will come from the view because we will add some helper method in the view to show the page links:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;lt;%= will_paginate @data %&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;This code you can put it in the end of the list, so that when you click on the link it will send request to the same action with parameter as next page number.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-181654713318333354?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>through association</title>
   <link href="http://abhidsm.github.com/through/models/assoications/2011/02/01/through-association/"/>
   <updated>2011-02-01T17:10:00Z</updated>
   <id>http://tom.preston-werner.com/through/models/assoications/2011/02/01/through-association</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;There are many associations in Rails, like one-to-one, one-to-many, many-to-many. You can associate a model to another using any of these associations. So what is 'through' association?&lt;br /&gt;&lt;br /&gt;Take an example of three models: teacher, student, subject&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/1298824.js?file=association.rb&quot;&gt;&lt;/script&gt;&lt;br /&gt;There is no direct association between teacher and student. So using through you can create association between teacher and student models.&lt;br /&gt;&lt;br /&gt;&lt;script src=&quot;https://gist.github.com/1298834.js?file=through_association.rb&quot;&gt;&lt;/script&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-1538085144951876139?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Cron Job</title>
   <link href="http://abhidsm.github.com/background/process/whenever/cron/job/rails/2011/01/27/Cron-Job/"/>
   <updated>2011-01-27T15:46:00Z</updated>
   <id>http://tom.preston-werner.com/background/process/whenever/cron/job/rails/2011/01/27/Cron-Job</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Cron is a time based job scheduler. Cron job is a job scheduled to run at particular time. In rails you may need to create cron jobs in many situations. For example send account expiration mail, check account balance and inform the user, etc. There is a gem&amp;nbsp;'Whenever',&amp;nbsp;which allows you to create a cron job.&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/javan/whenever&quot;&gt;Whenever&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;Using whenever you can easily create cron jobs. First you have to install the gem:&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;gem install whenever&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;Then from your application path type:&lt;/div&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;whenevrize .&lt;/span&gt;&lt;/div&gt;This will create the file 'config/schedule.rb'.&lt;br /&gt;&lt;br /&gt;In scedule.rb file you can write your cron job:&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;every 1.day, :at =&amp;gt; '12:00 AM' do&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp; runner &quot;Model.method&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;end&amp;nbsp;&lt;/span&gt;&lt;br /&gt;this will run the method inside the Model everyday at 12:00 AM.&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: orange;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;For more details visit &lt;a href=&quot;https://github.com/javan/whenever&quot;&gt;GitHub&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-4475212885404274660?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>Delayed Job</title>
   <link href="http://abhidsm.github.com/delayed/jobs/background/process/plugin/rails/2011/01/23/Delayed-Job/"/>
   <updated>2011-01-23T04:50:00Z</updated>
   <id>http://tom.preston-werner.com/delayed/jobs/background/process/plugin/rails/2011/01/23/Delayed-Job</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;Delayed Job is a plugin used to execute long running jobs in background. For example, downloads, uploads, external interactions etc. And you can also specify when to start a delayed job.&lt;br /&gt;&lt;br /&gt;To install delayed_job plugin:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;script/plugin install git://github.com/tobi/delayed_job.git&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;After installation you need to create a table for the delayed job to save the jobs.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;script/generate migration create_table_for_delayed_job&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;And add the following script to the migration file.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;class CreateTableForDelayedJob &amp;lt; ActiveRecord::Migration&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;def self.up&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; create_table :delayed_jobs, :force =&amp;gt; true do |t|&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.integer  :priority, :default =&amp;gt; 0&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.integer  :attempts, :default =&amp;gt; 0&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.text     :handler&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.text     :last_error&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.datetime :run_at&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.datetime :locked_at&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.datetime :failed_at&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.string   :locked_by&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;t.timestamps&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; end&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;end&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;def self.down&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp; drop_table :delayed_jobs&lt;br /&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp;end&lt;br /&gt;end&lt;/span&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;Now run the migration:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;rake db:migrate&lt;/span&gt;&lt;br /&gt;&lt;i&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/i&gt;&lt;br /&gt;To add a job to delayed_job you can use the enqueue method of Delayed Job. First you have to create a Job Class, for example we need to send a notification mail using delayed job. Then we create a lib file with the content:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;Class DelayedNotificationMail&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp; attr_accessor :id&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp; def initialize(id)&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;self.id = id&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp; end&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp; def perform&lt;/span&gt;&lt;br /&gt;&lt;div style=&quot;text-align: left;&quot;&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;UserMailer.deliver_notification_mail (User.find(id))&lt;/span&gt;&lt;/div&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;&amp;nbsp;&amp;nbsp; end&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;end&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;Now we can add job to the delayed_job using:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;Delayed::Job.enqueue DelayedNotificationMail.new(@user_id), 0, 1.hour.from_now&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;To run the jobs in background you have to execute the rake task:&lt;br /&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;rake jobs:work&lt;/span&gt;&lt;br /&gt;&lt;b&gt;&lt;i&gt;&lt;br /&gt;&lt;/i&gt;&lt;/b&gt;&lt;br /&gt;This will start a process which will run the jobs in the queue, and will run the job according to the delay specified in the job.&lt;br /&gt;&lt;br /&gt;To clear all the jobs in queue you can use the rake task:&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;rake jobs:clear&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;For more details you can go to the &lt;a href=&quot;https://github.com/tobi/delayed_job&quot;&gt;GitHub&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-980501115402390831?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>dependent</title>
   <link href="http://abhidsm.github.com/association/rails/dependent/2010/07/20/dependent/"/>
   <updated>2010-07-20T17:54:00Z</updated>
   <id>http://tom.preston-werner.com/association/rails/dependent/2010/07/20/dependent</id>
   <content type="html">&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot; trbidi=&quot;on&quot;&gt;'dependent' is an option used with association in rails.&lt;br /&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;Association &lt;/b&gt;&lt;br /&gt;&lt;div&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;An association is the relationship between models. There are associations like one-one, one-many, many-many. To represent association in rails, it uses has_many, belongs_to, has_one and has_and_belongs_to_many. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;For Eg: Account model contains many Members. It is represented as:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In Account Model:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;has_many  :members&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In Member Model:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;belongs_to :account &lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;&lt;br /&gt;&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;b&gt;dependent&lt;/b&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;In the above example if we delete one record from the accounts table it will affect the members table. The members table will contain the invalid account_id. In these situations we can use '&lt;i&gt;dependent&lt;/i&gt;'.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In Account Model:&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;&lt;span class=&quot;Apple-style-span&quot; style=&quot;color: #990000; font-family: 'Courier New', Courier, monospace;&quot;&gt;has_many :members, :dependent =&amp;gt; :destroy&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;It will automatically deletes all the dependent data from the models.&lt;/div&gt;&lt;div&gt;&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;  &lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;blogger-post-footer&quot;&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/7585462888260154580-5784020747160007745?l=abhionrails.blogspot.com' alt='' /&gt;&lt;/div&gt;</content>
 </entry>
 
 
</feed>
